Training Commands Step By Step
Google collaborators (.ipynb) step-by-step instructions and commend line for training
the proposed model.
# Open google drive, create folder “yolov4”, create another folder
inside titled it “training”.
# Mount drive, link your folder, navigate to the “yolov4” folder in
your drive.
%cd ..
from google.colab import drive
drive.mount('/content/gdrive')
# Run the following command to create a symbolic link so that now
the path /content/gdrive/My\ Drive/ is equal to /mydrive
!ln -s /content/gdrive/My\ Drive/ /mydrive
#Navigate to /mydrive/yolov4 folder & create a folder by name of
training.
%cd /mydrive/yolov4
# Clone Darknet git repository
# Clone the Darknet git repository in the yolov4 folder on your
drive.
!git clone https://github.com/AlexeyAB/darknet
# Make changes in the makefile to enable OPENCV and GPU.
%cd darknet/
!sed -i 's/OPENCV=0/OPENCV=1/' Makefile
!sed -i 's/GPU=0/GPU=1/' Makefile
!sed -i 's/CUDNN=0/CUDNN=1/' Makefile
!sed -i 's/CUDNN_HALF=0/CUDNN_HALF=1/' Makefile
!sed -i 's/LIBSO=0/LIBSO=1/' Makefile
# Run make command to build darknet or compile the Darknet
!make
# Zip all images with its corresponding annotated text file and upl
oaded it to yolov4 folder.
# Run unzip command, to unzip the obj.zip dataset and its contents
so that they are now in /darknet/data/ folder
!unzip /mydrive/yolov4/obj.zip -d data/
# configure yolov4-custom.cfg and upload it to yolov4 folder in Goo
gle drive.
# After configuration, you can directly upload it to the darknet/cf
g directory. You can move your yolov4-custom.cfg file to the /darkn
et/cfg/folder. Alternatively, by running the following command, it
will move to the cfg folder.
!cp /mydrive/yolov4/yolov4-custom.cfg cfg
# Creat obj.names and obj.data and upload it to yolov4 folder in dr
ive
# Copy the obj.names and obj.data files so that they are now in /da
rknet/data/ folder, run the command to move it to the data folder.
!cp /mydrive/yolov4/obj.names data
!cp /mydrive/yolov4/obj.data data
# Copy the process.py file into the current darknet directory
!cp /mydrive/yolov4/process.py .
#Run the process.py python script to create the train.txt & test.tx
t files inside the data folder, link for process.py script: https:/
/github.com/techzizou/yolov4-custom_Training/blob/main/yolov4/proce
ss.py
#The current working directory is /mydrive/yolov4/darknet
!python process.py
# list the content of data folder
!ls data/
# Data folder should contain these files.
labels obj obj.data obj.names test.txt train.txt
# Download the pre-trained YOLOv4 weights. Here we use transfer lea
rning. Instead of training a model from scratch, we use pre-trained
YOLOv4 weights which have been trained up to 137 convolutional laye
rs. Run the following command to download the YOLOv4 pre-trained we
ights file.
!wget https://github.com/AlexeyAB/darknet/releases/download/darknet
_yolo_
v3_optimal/yolov4.conv.137
# Start of Training
!./darknet detector train data/obj.data cfg/yolov4-custom.cfg yolov
4.conv.137 -dont_show -map
# If we disconnected than we can use this command for restart traini
ng
!./darknet detector train data/obj.data cfg/yolov4-custom.cfg /mydri
ve/yolov4/training/yolov4-custom_last.weights -dont_show –map
# calculate mAP (mean average precision)
!./darknet detector map data/obj.data cfg/yolov4-custom.cfg /mydriv
e/yolov4/training/yolov4-custom_xxxx.weights -points 0
# Run the model to test and detect damage from an image.
!./darknet detector test cfg/obj.data cfg/yolov4-custom.cfg yolov4-
custom_best.weights data/test.jpg
# Run the model on a video to detect road damage and save its output
.
!./darknet detector demo cfg/obj.data cfg/yolov4-custom.cfg yolov4.
weights -dont_show data/test.mp4 -thresh 0.5 -i 0 -out_filename det
ected_video.avi